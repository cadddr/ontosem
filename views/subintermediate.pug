mixin word(index, sense, word)
	span.highlightable.word(data-entity-id=index+':'+sense, parent-id=index+':0.0') #{word}

mixin pair(pairId, sortId, words)
	span.pair(data-entity-id=senseEvent.id)
		+word(sortId[0], sortId[1]+'.'+sortId[2], words[0])
		| &nbsp;
		+word(sortId[3], sortId[4]+'.'+sortId[5], words[1])

script(src='js/prism.js')
div.parseContainer(id='parse-'+sentenceIndex)
	// - console.log(results)
	div#sentence
		span.sentenceText
		span.sentenceShowRaw.button Show Raw
		span.sentenceMinimize.button Hide
	div.rawContainer.hidden
		each line in results.lines
			if line.type == 'TMRStart'
				pre.rawParse
					code.language-javascript.rawTMR
						= line.TMRContents + ' '
				br
			else if line.type != 'TMR'
				pre.rawParse
					code.language-javascript
						= line.raw + ' '
				br
	div.guiContainer
		table.dependencies
			thead
				tr
					td(colspan='100') Dependencies
			tbody
				each dep in results.dependencies
					- var depClasses = (dep.replaced?'replaced ':' ') + (dep.hasEvents?'hasEvents':'noEvents')
					tr(class=depClasses, dep='dep_'+dep.words[0].index+'_'+dep.words[1].index)
						td.depType
							= dep.type
						td.depIndex
							= dep.words[0].index
						td.depToken
							if dep.words[0].index != -1
								+word(dep.words[0].index, '0.0', dep.words[0].token)
									span.highlightable.word(data-entity-id=dep.words[0].index+':0.0', parent-id=dep.words[0].index+':0.0') #{dep.words[0].token}
						td.depIndex
							= dep.words[1].index
						td.depToken
							+word(dep.words[1].index, '0.0', dep.words[1].token)
		each mapping in results.lexMappings
			if mapping.state == 'show'
				- // console.log('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')
				- // console.log(mapping)
				table.word-parse.open(id=mapping.token+'_ID')
					- // word header
					thead
						tr
							td(colspan='100')
								div.word-header.no-select
									+word(mapping.index, '0.0', mapping.token)
					tbody
						- // column headers
						tr
							th.senseCell(rowspan='2') Sense
							th.matchesCell(colspan=mapping.usedDependencies.length) Matches
							th.resultCell(rowspan='2') Result
						tr
							each dep in mapping.dependencies
								if dep.hasEvents
									th.matchesCell(dep='dep_'+dep.words[0].index+'_'+dep.words[1].index) #{dep.type}
						- // event rows
						each sense in mapping.senses
							- senseEvents = results.eventMap[sense.index][sense.id]
							- sense.result = ['Successfully matched']
							- sense.status = 'match'
							tr.eventRow(data-entries='')
								td.senseCell
									div.sense
										+word(sense.index, sense.id, sense.senseString)
								each senseEvent in senseEvents
									if senseEvent.dummy
										td.matchesCell.dummyCell(class=[senseEvent.status])
											div.matches
									else
										td.matchesCell(class=[senseEvent.status])
											div.matches
												| &nbsp;
												- sortId = senseEvent.sortId
												- var eventClass = 'success'
												if senseEvent.status != 'match'
													- sense.result = senseEvent.reasons
													- eventClass = 'failure'
													- sense.status = 'skip'
												
												if senseEvent.type == 'pair'
													+pair(senseEvent.id, sortId, senseEvent.words)
												else
													+word(sense.index, sense.id, senseEvent.words[0])
												| &nbsp;
								td.resultCell(class=[sense.status])
									div.result
										ul
											each reason in sense.result
												li #{reason}
br






